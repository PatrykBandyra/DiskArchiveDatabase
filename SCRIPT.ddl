-- Generated by Oracle SQL Developer Data Modeler 20.4.1.406.0906
--   at:        2021-05-29 18:32:47 CEST
--   site:      Oracle Database 21c
--   type:      Oracle Database 21c



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE definicje_parametrow_smart (
    kod_parametru  NUMBER(6)
        CONSTRAINT zakres_kodu_parametru NOT NULL,
    nazwa          NVARCHAR2(20) NOT NULL,
    opcjonalnosc   CHAR(1) DEFAULT ON NULL 'N'
        CONSTRAINT opcjonalnosc_dozwolone_znaki NOT NULL,
    typ_danych     CHAR(1) DEFAULT ON NULL 'N'
        CONSTRAINT typ_danych_dozwolone_znaki NOT NULL,
    opis           NVARCHAR2(1000)
)
LOGGING;

ALTER TABLE definicje_parametrow_smart
    ADD CONSTRAINT zakres_kodu_parametru CHECK ( kod_parametru BETWEEN 1 AND 999999 );

ALTER TABLE definicje_parametrow_smart
    ADD CONSTRAINT opcjonalnosc_dozwolone_znaki CHECK ( opcjonalnosc IN ( 'N', 'T' ) );

ALTER TABLE definicje_parametrow_smart
    ADD CONSTRAINT typ_danych_dozwolone_znaki CHECK ( typ_danych IN ( 'N', 'S' ) );

COMMENT ON TABLE definicje_parametrow_smart IS
    'Reprezentuje definicjê danego parametru S.M.A.R.T.';

COMMENT ON COLUMN definicje_parametrow_smart.kod_parametru IS
    'Liczba ca³kowita, 6-cyfrowa. Jednoznacznie identyfikuje definicjê danego parametru S.M.A.R.T.';

COMMENT ON COLUMN definicje_parametrow_smart.nazwa IS
    'Nazwa parametru S.M.A.R.T. Powinna byc unikalna.';

COMMENT ON COLUMN definicje_parametrow_smart.opcjonalnosc IS
    'Czy dany parametr jest opcjonalny? "T" dla tak, "N" dla nie. ';

COMMENT ON COLUMN definicje_parametrow_smart.typ_danych IS
    'Typ danych danego parametru S.M.A.R.T. Pozwoli nam poprawnie interpretowaæ wartoœci danego parametru. "N" dla typu numerycznego, "S" dla typu znakowego.';

GRANT DELETE, INSERT, SELECT, UPDATE ON definicje_parametrow_smart TO bd2c001_app;

ALTER TABLE definicje_parametrow_smart ADD CONSTRAINT def_param_smart_pk PRIMARY KEY ( kod_parametru );

ALTER TABLE definicje_parametrow_smart ADD CONSTRAINT def_param_smart_nazwa_uk UNIQUE ( nazwa );

CREATE TABLE dyski (
    nr_seryjny         CHAR(10) NOT NULL,
    id_producenta      NUMBER(4) NOT NULL,
    kod_typu           NUMBER(6) NOT NULL,
    status             NVARCHAR2(8) DEFAULT 'W¥TPLIWY'
        CONSTRAINT nazwy_statusow NOT NULL,
    data_produkcji     DATE NOT NULL,
    data_zamontowania  DATE,
    data_wycofania     DATE,
    opis               NVARCHAR2(1000)
)
LOGGING;

ALTER TABLE dyski
    ADD CONSTRAINT nazwy_statusow CHECK ( status IN ( 'dobry', 'watpliwy', 'zepsuty' ) );

COMMENT ON TABLE dyski IS
    'Reprezentuje fizyczny dysk danego typu w archiwum dyskowym.';

COMMENT ON COLUMN dyski.nr_seryjny IS
    'Ci¹g cyfr i liter o d³ugoœci 10. Wraz z "Id Producenta" i 
"Kodem Typu" jednoznacznie identyfikuje dany dysk.';

COMMENT ON COLUMN dyski.status IS
    'Okreœla status danego dysku w bie¿¹cej chwili. Status: dobry/w¹tpliwy/zepsuty.';

COMMENT ON COLUMN dyski.data_produkcji IS
    'Okreœla datê produkcji danego dysku.';

COMMENT ON COLUMN dyski.data_zamontowania IS
    'Okreœla datê zamontowania dysku w archiwum dyskowym.';

COMMENT ON COLUMN dyski.data_wycofania IS
    'Okreœla datê wycofania z u¿ycia danego dysku.';

GRANT DELETE, INSERT, SELECT, UPDATE ON dyski TO bd2c001_app;

ALTER TABLE dyski
    ADD CONSTRAINT dysk_pk PRIMARY KEY ( id_producenta,
                                         kod_typu,
                                         nr_seryjny );

CREATE TABLE parametry_smart_typow_dyskow (
    id_producenta  NUMBER(4) NOT NULL,
    kod_typu       NUMBER(6) NOT NULL,
    kod_parametru  NUMBER(6) NOT NULL
)
LOGGING;

COMMENT ON TABLE parametry_smart_typow_dyskow IS
    'Reprezentuje logiczne po³¹czenie pomiêdzy "Typem Dysku" posiadaj¹cym parametr S.M.A.R.T., "Definicj¹ Parametru S.M.A.R.T."
oraz "Wartoœci¹ Parametru S.M.A.R.T." danego fizycznego dysku. ';

GRANT DELETE, INSERT, SELECT, UPDATE ON parametry_smart_typow_dyskow TO bd2c001_app;

ALTER TABLE parametry_smart_typow_dyskow
    ADD CONSTRAINT param_smart_t_dysk_pk PRIMARY KEY ( id_producenta,
                                                       kod_typu,
                                                       kod_parametru );

CREATE TABLE producenci (
    id_producenta  NUMBER(4)
        CONSTRAINT zakres_id_producenta NOT NULL,
    nazwa          NVARCHAR2(40) NOT NULL,
    opis           NVARCHAR2(1000)
)
LOGGING;

ALTER TABLE producenci
    ADD CONSTRAINT zakres_id_producenta CHECK ( id_producenta BETWEEN 1 AND 9999 );

COMMENT ON TABLE producenci IS
    'Reprezentuje producentów produkuj¹cych ró¿ne typy dysków.';

COMMENT ON COLUMN producenci.id_producenta IS
    'Liczba ca³kowita, maksymalnie 4-cyfrowa, identyfikuj¹ca jednoznacznie danego producenta.';

COMMENT ON COLUMN producenci.nazwa IS
    'Nazwa producenta (firmy). Powinna byæ unikalna.';

GRANT DELETE, INSERT, SELECT, UPDATE ON producenci TO bd2c001_app;

ALTER TABLE producenci ADD CONSTRAINT prod_pk PRIMARY KEY ( id_producenta );

ALTER TABLE producenci ADD CONSTRAINT prod_nazwa_uk UNIQUE ( nazwa );

CREATE TABLE typy_dyskow (
    kod_typu       NUMBER(6)
        CONSTRAINT kod_typu_zakres NOT NULL,
    id_producenta  NUMBER(4) NOT NULL,
    rodzaj         CHAR(3) DEFAULT ON NULL 'SSD'
        CONSTRAINT nazwy_rodzajow NOT NULL,
    pojemnosc      NUMBER(19)
        CONSTRAINT pojemnosc_zakres NOT NULL,
    opis           NVARCHAR2(1000)
)
LOGGING;

ALTER TABLE typy_dyskow
    ADD CONSTRAINT kod_typu_zakres CHECK ( kod_typu BETWEEN 1 AND 999999 );

ALTER TABLE typy_dyskow
    ADD CONSTRAINT nazwy_rodzajow CHECK ( rodzaj IN ( 'HDD', 'SSD' ) );

ALTER TABLE typy_dyskow
    ADD CONSTRAINT pojemnosc_zakres CHECK ( pojemnosc BETWEEN 1 AND 9999999999999999999 );

COMMENT ON TABLE typy_dyskow IS
    'Reprezentuje typy dysków produkowane przez producentów i wystêpuj¹ce w naszym archiwum dyskowym.';

COMMENT ON COLUMN typy_dyskow.kod_typu IS
    'Liczba ca³kowita, maksymalnie 6-cyfrowa. Wraz z "Id Producenta" jednoznacznie identyfikuje dany typ dysku.';

COMMENT ON COLUMN typy_dyskow.rodzaj IS
    'Rodzaj dysku: HDD/SSD';

COMMENT ON COLUMN typy_dyskow.pojemnosc IS
    'Liczba ca³kowita, maksymalnie 19-cyfrowa, reprezentuj¹ca pojemnoœæ danego typu dysku w bajtach.';

GRANT DELETE, INSERT, SELECT, UPDATE ON typy_dyskow TO bd2c001_app;

ALTER TABLE typy_dyskow ADD CONSTRAINT t_dysk_pk PRIMARY KEY ( id_producenta,
                                                               kod_typu );

CREATE TABLE wartosci_parametrow_smart (
    data_dodania        DATE NOT NULL,
    id_producenta       NUMBER(4) NOT NULL,
    kod_typu            NUMBER(6) NOT NULL,
    kod_parametru       NUMBER(6) NOT NULL,
    nr_seryjny          CHAR(10) NOT NULL,
    wartosc_znakowa     NVARCHAR2(20),
    wartosc_numeryczna  NUMBER(10, 4)
)
LOGGING;

ALTER TABLE wartosci_parametrow_smart ADD CHECK ( kod_parametru BETWEEN 1 AND 999999 );

COMMENT ON TABLE wartosci_parametrow_smart IS
    'Reprezentuje historiê zmian wartoœæi poszczególnych parametrów S.M.A.R.T. danego dysku.';

COMMENT ON COLUMN wartosci_parametrow_smart.data_dodania IS
    'Data dodania wartoœci danego parametru S.M.A.R.T. dla danego dysku. Stanowi czêœæ PUID.';

COMMENT ON COLUMN wartosci_parametrow_smart.wartosc_znakowa IS
    'Wartoœæ znakowa parametru S.M.A.R.T. nie mo¿e byæ null, jeœli "Definicja Parametru S.M.A.R.T." posiada znacznik typu danych "s" (string).';

COMMENT ON COLUMN wartosci_parametrow_smart.wartosc_numeryczna IS
    'Wartoœæ numeryczna parametru S.M.A.R.T. nie mo¿e byæ null, jeœli "Definicja Parametru S.M.A.R.T." posiada znacznik typu danych "n" (numeric).';

GRANT DELETE, INSERT, SELECT, UPDATE ON wartosci_parametrow_smart TO bd2c001_app;

ALTER TABLE wartosci_parametrow_smart
    ADD CONSTRAINT wart_param_smart_pk PRIMARY KEY ( id_producenta,
                                                     kod_typu,
                                                     kod_parametru,
                                                     nr_seryjny,
                                                     data_dodania );

ALTER TABLE dyski
    ADD CONSTRAINT dysk_t_dysk_fk FOREIGN KEY ( id_producenta,
                                                kod_typu )
        REFERENCES typy_dyskow ( id_producenta,
                                 kod_typu )
    DEFERRABLE;

ALTER TABLE parametry_smart_typow_dyskow
    ADD CONSTRAINT p_smart_t_dysk_def_p_smart_fk FOREIGN KEY ( kod_parametru )
        REFERENCES definicje_parametrow_smart ( kod_parametru )
    DEFERRABLE;

ALTER TABLE parametry_smart_typow_dyskow
    ADD CONSTRAINT p_smart_t_dysk_t_dysk_fk FOREIGN KEY ( id_producenta,
                                                          kod_typu )
        REFERENCES typy_dyskow ( id_producenta,
                                 kod_typu )
    DEFERRABLE;

ALTER TABLE typy_dyskow
    ADD CONSTRAINT t_dysk_prod_fk FOREIGN KEY ( id_producenta )
        REFERENCES producenci ( id_producenta )
    DEFERRABLE;

ALTER TABLE wartosci_parametrow_smart
    ADD CONSTRAINT wart_p_smart_dysk_fk FOREIGN KEY ( id_producenta,
                                                      kod_typu,
                                                      nr_seryjny )
        REFERENCES dyski ( id_producenta,
                           kod_typu,
                           nr_seryjny )
            ON DELETE CASCADE
    DEFERRABLE;

ALTER TABLE wartosci_parametrow_smart
    ADD CONSTRAINT wart_p_smart_p_smart_t_dysk_fk FOREIGN KEY ( id_producenta,
                                                                kod_typu,
                                                                kod_parametru )
        REFERENCES parametry_smart_typow_dyskow ( id_producenta,
                                                  kod_typu,
                                                  kod_parametru )
    DEFERRABLE;

CREATE OR REPLACE TRIGGER fkntm_dyski BEFORE
    UPDATE OF id_producenta, kod_typu ON dyski FOR EACH ROW
    WHEN (new.id_producenta <> old.id_producenta OR new.kod_typu <> old.kod_typu)
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table DYSKI is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_parametry_smart_typow_dy BEFORE
    UPDATE OF id_producenta, kod_typu, kod_parametru ON parametry_smart_typow_dyskow FOR EACH ROW
    WHEN (new.id_producenta <> old.id_producenta OR new.kod_typu <> old.kod_typu OR new.kod_parametru <> old.kod_parametru)
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table PARAMETRY_SMART_TYPOW_DYSKOW is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_typy_dyskow BEFORE
    UPDATE OF id_producenta ON typy_dyskow FOR EACH ROW
    WHEN (new.id_producenta <> old.id_producenta)
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table TYPY_DYSKOW is violated');
END;
/

CREATE OR REPLACE TRIGGER fkntm_wartosci_parametrow_smar BEFORE
    UPDATE OF id_producenta, kod_typu, kod_parametru, nr_seryjny ON wartosci_parametrow_smart FOR EACH ROW
    WHEN (new.id_producenta <> old.id_producenta OR new.kod_typu <> old.kod_typu OR new.kod_parametru <> old.kod_parametru OR
    new.nr_seryjny <> old.nr_seryjny)
BEGIN
    raise_application_error(-20225, 'Non Transferable FK constraint  on table WARTOSCI_PARAMETROW_SMART is violated');
END;
/


-- MY TRIGGERS ------------------------------------------------------------------------------------------


CREATE OR REPLACE TRIGGER spr_date_dod_wart_param_smart
    BEFORE INSERT OR UPDATE OF data_dodania
    ON wartosci_parametrow_smart
    FOR EACH ROW
DECLARE
    mounting_date dyski.data_zamontowania%TYPE;
BEGIN
    SELECT data_zamontowania INTO mounting_date FROM dyski
    WHERE :NEW.nr_seryjny = nr_seryjny AND :NEW.id_producenta = id_producenta
    AND :NEW.kod_typu = kod_typu;

    IF sysdate < :NEW.data_dodania OR :NEW.data_dodania < mounting_date THEN 
        raise_application_error(-20001, 'Data dodania wartosci parametru SMART niepoprawna');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER spr_wartosc_parametru_smart
    BEFORE INSERT OR UPDATE OF wartosc_znakowa OR
           INSERT OR UPDATE OF wartosc_numeryczna
    ON wartosci_parametrow_smart
    FOR EACH ROW
DECLARE
    data_type definicje_parametrow_smart.typ_danych%TYPE;
    optionality definicje_parametrow_smart.opcjonalnosc%TYPE;
BEGIN
    SELECT typ_danych INTO data_type FROM definicje_parametrow_smart
    WHERE kod_parametru = :NEW.kod_parametru;
    SELECT opcjonalnosc INTO optionality FROM definicje_parametrow_smart
    WHERE kod_parametru = :NEW.kod_parametru;
    
    IF data_type = 'N' THEN
        IF :NEW.wartosc_numeryczna IS NULL AND optionality = 'N' THEN
            raise_application_error(-20002, 'Brak obowiazkowej wartosci numerycznej w wartosci parametru SMART');
        END IF;
        IF :NEW.wartosc_znakowa IS NOT NULL THEN
            raise_application_error(-20003, 'Wprowadzono niodpowiednie dane. Wartosc znakowa wartosci parametru SMART powinna byæ NULL');
        END IF;
    END IF;
    
    IF data_type = 'S' THEN
        IF :NEW.wartosc_znakowa IS NULL AND optionality = 'N' THEN
            raise_application_error(-20004, 'Brak obowiazkowej wartosci znakowej w wartosci parametru SMART');
        END IF;
        IF :NEW.wartosc_numeryczna IS NOT NULL THEN
            raise_application_error(-20005, 'Wprowadzono niodpowiednie dane. Wartosc numeryczna wartosci parametru SMART powinna byæ NULL');
        END IF;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER spr_date_produk
    BEFORE INSERT OR UPDATE OF data_produkcji
    ON dyski
    FOR EACH ROW
BEGIN
    IF sysdate < :NEW.data_produkcji THEN
        raise_application_error(-20006, 'Data produkcji dysku niepoprawna');
    END IF;
END;
/


CREATE OR REPLACE TRIGGER spr_date_zamont
    BEFORE INSERT OR UPDATE OF data_zamontowania
    ON dyski
    FOR EACH ROW
BEGIN
    IF :NEW.data_zamontowania < :NEW.data_produkcji THEN
        raise_application_error(-20007, 'Data zamontowania dysku niepoprawna');
    END IF;
END;
/


create or replace TRIGGER spr_date_wycof
    BEFORE INSERT OR UPDATE OF data_wycofania
    ON dyski
    FOR EACH ROW
BEGIN
    IF :NEW.data_zamontowania IS NULL THEN
        raise_application_error(-20008, 'Brak daty zamontowania dysku. Nie mozna wstawic daty wycofania');
    ELSIF :NEW.data_wycofania < :NEW.data_zamontowania THEN
        raise_application_error(-20009, 'Data wycofania dysku niepoprawna');
    END IF;
END;
/


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             6
-- CREATE INDEX                             0
-- ALTER TABLE                             23
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           4
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              2
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
